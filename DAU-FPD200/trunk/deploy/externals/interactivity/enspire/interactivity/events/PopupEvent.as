import enspire.interactivity.events.*;

/*
   Class: PopupEvent
   Event dispatched from the interactivity API. It sends all the appropriate text to the
   surrounding application to display a popup with a close/continue button.
*/

class enspire.interactivity.events.PopupEvent 
	extends InteractivityEvent {
	
	private var text:String;
	private var buttonText:String;
	
	
	/* Constructor: PopupEvent
       Creates a new PopupEvent.
	   
	   Example:
	   (start example)
	   		var pe = new PopupEvent(InteractivityEvent.POPUP,null);
	   (end)
    */
	public function PopupEvent(type:Number, data:Object) {
		super();
		this.type = InteractivityEvent.POPUP;
	}

	/* Function: getPopupText
       Returns the text that is intended to be displayed in a popup. This text is selected or generated by 
	   the interactivity code that evaluates the activity. 
	   
	   Example:
	   (start example)
	   		var popupText = pe.getPopupText();
			mcPopup.tf.htmlText = popupText;
	   (end)
    */
	public function getPopupText():String {
		return text;
	}
	
	/* Function: getButtonText
	   This will return the desired text to be shown or associated with the button that closes
	   the popup. We often choose between 'close' and 'continue' depending upon the circumstances.
	   Since this is more the responsibility of the surrounding application, it might make sense to 
	   ignore this in certain cases.
	
	   Example:
	   (start example)
	   		var buttonText = pe.getButtonText();
			mcPopup.mcButton.tf.htmlText = buttonText;
	   (end)
    */
	public function getButtonText():String {
		return buttonText;
	}
	
	public function setPopupText(t) {
		this.text = t;
	}
	
	public function setButtonText(t) {
		this.buttonText = t;
	}
	
	
}

